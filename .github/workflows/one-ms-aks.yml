name: User Java CICD

env:
  registry: onemsacr.azurecr.io
  repository: one-ms-aks
  build_name: USER-JAVA
  webapp_name: one-ms-two
  #staging_url: https://one-ms-two-staging.azurewebsites.net
  #prod_url: https://one-ms-two.azurewebsites.net
  resource_group: Lukman-RG

on:
  push:
    branches: [ master ]
    paths: 
      - .github/workflows/one-ms-aks.yml
      - ./**
  pull_request:
    branches: [ master ]
    paths: 
      - .github/workflows/one-ms-aks.yml
      - ./**

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./**
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  docker_build_and_push:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:     
    - uses: actions/checkout@v2

    - name: Docker login     
      run: docker login $registry -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_KEY }}

    - name: Docker build
      run: docker build . -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}}

    - name: Docker Push
      run: docker push $registry/$repository:${{github.run_number}}  

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  deploy_staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS  }}'
      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          app-name: '${{ env.webapp_name }}'
          slot-name: dev
          images: '${{ env.registry }}/${{ env.repository }}:${{github.run_number}}'

      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: '${{secrets.GITHUB_TOKEN}}'
          script: >
            let body = "${{ env.build_name }} Worflow Failure \n Build Number:
            ${{ github.run_number }} \n Build Log: https://github.com/${{
            github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{
            github.sha }}](https://github.com/${{ github.repository
            }}/commit/${{ github.sha }}) \n";

            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });

  validate_staging_and_swap_production:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:
      - name: curl
        id: poi-health-check
        uses: satak/webrequest-action@master
        with:
          url: >-
            https://one-ms-two-staging.azurewebsites.net/api/healthcheck/poi
          method: GET
      - name: Login via Az module
        uses: azure/login@v1.1
        with:
          creds: '${{secrets.AZURE_CREDENTIALS}}'
      - name: Check Output Swap Slots
        shell: pwsh
        run: >
          $output = '${{ steps.poi-health-check.outputs.output }}' |
          ConvertFrom-Json

          Write-Host " Status code is $($output.statusCode) "

          if($($output.statusCode) -eq 200) {          

          Write-host "Healthy" 

          az webapp deployment slot swap --name ${{ env.webapp_name }} --resource-group ${{ env.resource_group }} --slot staging --target-slot production }      

          else {

          Write-Error "POI API is not healthy"

          }

      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: '${{secrets.GITHUB_TOKEN}}'
          script: >
            let body = "${{ env.build_name }} Worflow Failure \n Build Number:
            ${{ github.run_number }} \n Build Log: https://github.com/${{
            github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{
            github.sha }}](https://github.com/${{ github.repository
            }}/commit/${{ github.sha }}) \n";

            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });
  validate_prod_and_swap_staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: validate_staging_and_swap_production
    steps:
      - name: curl
        id: poi-health-check
        uses: satak/webrequest-action@master
        with:
          url: >-
            https://one-ms-two-staging.azurewebsites.net/api/healthcheck/poi
          method: GET
      - name: Login via Az module
        uses: azure/login@v1.1
        with:
          creds: '${{secrets.AZURE_CREDENTIALS}}'
      - name: Check Output Swap Slots
        shell: pwsh
        run: >
          $output = '${{ steps.poi-health-check.outputs.output }}' |
          ConvertFrom-Json

          Write-Host " Status code is $($output.statusCode) "

          if($($output.statusCode) -eq 200) {          
            Write-host "Healthy"
            }
             else {
             Write-Error "POI API is not healthy - reverting to previous version"
             az webapp deployment slot swap --name ${{ env.webapp_name }} --resource-group ${{ env.resource_group }} --slot staging --target-slot production
             }

      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: '${{secrets.GITHUB_TOKEN}}'
          script: >
            let body = "${{ env.build_name }} Worflow Failure \n Build Number:
            ${{ github.run_number }} \n Build Log: https://github.com/${{
            github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{
            github.sha }}](https://github.com/${{ github.repository
            }}/commit/${{ github.sha }}) \n";

            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });
##